/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("function addLeadZero(n) {\n  return Number(n) < 10 ? `0${n}` : n;\n}\n\nfunction createIconHtml(iconName) {\n  return `<i class='material-icons'>${iconName}</i>`;\n}\n\nfunction randomInteger(min, max) {\n  const rand = min - 0.5 + Math.random() * (max - min + 1);\n  return Math.round(rand);\n}\n\nconst gemPuzzle = {\n  // DOM elements with different selectors\n  elements: {\n    main: null, // <main>\n    info: null, // .info\n    field: null, // .play-field\n    puzzlesContainer: null, // .puzzles\n    puzzles: null, // .puzzles__item\n    time: null, // .info-content__time\n    moves: null, // .info-content__moves\n    menu: null, // .menu\n    scoresInfo: null, // .scores-info\n    soundsContainer: null, // .sounds\n    messageContent: null, // .message__content\n    canvas: null, // #canvas\n  },\n\n  properties: {\n    cells: [], // Properties of all the puzzles, including value, top, left, DOM element\n    empty: { // Properties of the empty cell within the field\n      value: 0, // 0 for empty (other puzzles have it from 1 to 63)\n      left: 0, // Position in a row -> 0, 1, 2 ... 7\n      top: 0, // Position in a column -> 0, 1, 2 ... 7\n    },\n    cellSizeInPercent: null, // For CSS properties\n    paused: false,\n    soundOn: true,\n    isCompleted: false,\n    scoreShown: false,\n    scores: [],\n    timer: null, // Interval ID for the timer\n    seconds: 1,\n    minutes: 0,\n    hours: 0,\n    moves: 0,\n  },\n\n  layouts: {\n    typesCount: 6,\n    minValue: 3,\n    maxValue: 8,\n    currentValue: 4,\n    properties: { // Generated each time for the particular currentValue\n      puzzlesInRow: 4,\n      puzzlesInColumn: 4,\n      puzzlesCount: 16,\n      visualInfo: '4*4',\n    },\n  },\n\n  menuButtons: [ // All names of the buttons to be created\n    'Scores',\n    'New game',\n    'Field type',\n    'Sound',\n    'Pause',\n    'Change Image',\n  ],\n\n  images: {\n    path: './src/images/',\n    count: 150, // Number of images in application\n  },\n\n  sounds: ['tink.wav', 'default-sound-2.mp3'],\n\n  // Create main elements, classes and DOM structure\n  init() {\n    this.elements.main = document.createElement('main');\n    this.elements.main.classList.add('puzzle-game');\n    document.body.appendChild(this.elements.main);\n\n    this.createBlockCanvas();\n    this.createBlockInfo();\n\n    // Create block Game\n    const game = document.createElement('section');\n    game.classList.add('game');\n    this.elements.main.appendChild(game);\n\n    const gameWrapper = document.createElement('div');\n    gameWrapper.classList.add('wrapper');\n    game.appendChild(gameWrapper);\n\n    this.elements.field = document.createElement('section');\n    this.elements.field.classList.add('play-field');\n    gameWrapper.appendChild(this.elements.field);\n\n    this.createPuzzleContainer();\n    this.createBlockScores(gameWrapper);\n    this.createBlockMenu();\n    this.createBlockMessage();\n\n    // Start new timer\n    clearInterval(this.properties.timer);\n    this.properties.timer = setInterval(this.showTime, 1000);\n\n    this.createBlockSounds();\n  },\n\n  createBlockCanvas() {\n    this.elements.canvas = document.createElement('canvas');\n    this.elements.canvas.setAttribute('id', 'canvas');\n    this.elements.canvas.innerText = 'Canvas not supproted';\n    this.elements.main.appendChild(this.elements.canvas);\n  },\n\n  createBlockInfo() {\n    this.elements.info = document.createElement('section');\n    this.elements.info.classList.add('info');\n    this.elements.main.appendChild(this.elements.info);\n\n    const infoWrapper = document.createElement('div');\n    infoWrapper.classList.add('wrapper');\n    this.elements.info.appendChild(infoWrapper);\n\n    const infoContent = document.createElement('div');\n    infoContent.classList.add('info-content');\n    infoWrapper.appendChild(infoContent);\n\n    this.elements.time = document.createElement('time');\n    this.elements.time.classList.add('info-content__time');\n    infoContent.appendChild(this.elements.time);\n\n    if (localStorage.getItem('seconds') === null) {\n      this.elements.time.innerText = '00:00:00';\n    } else {\n      const seconds = addLeadZero(localStorage.getItem('seconds'));\n      const minutes = addLeadZero(localStorage.getItem('minutes'));\n      const hours = addLeadZero(localStorage.getItem('hours'));\n      this.elements.time.innerText = `${hours}:${minutes}:${seconds}`;\n    }\n\n    this.elements.moves = document.createElement('div');\n    this.elements.moves.classList.add('info-content__moves');\n    infoContent.appendChild(this.elements.moves);\n\n    if (localStorage.getItem('moves') === null) {\n      this.elements.moves.innerText = 'Moves: 0';\n    } else {\n      this.elements.moves.innerText = `Moves: ${localStorage.getItem('moves')}`;\n    }\n  },\n\n  createPuzzleContainer() {\n    this.elements.puzzlesContainer = document.createElement('div');\n    this.elements.puzzlesContainer.classList.add('puzzles');\n    this.elements.field.appendChild(this.elements.puzzlesContainer);\n\n    // Выражение для теста\n    // this.elements.puzzlesContainer.appendChild(this.createPuzzles());\n\n    this.elements.puzzlesContainer.appendChild(\n      localStorage.getItem('cells') === null\n        ? this.createPuzzles() // For the first start\n        : this.loadStateFromLocalStorage(), // For the page reload\n    );\n\n    this.elements.puzzlesContainer\n      .addEventListener('dragover', this.dragOver);\n    this.elements.puzzlesContainer\n      .addEventListener('dragenter', this.dragEnter);\n    this.elements.puzzlesContainer\n      .addEventListener('dragleave', this.dragLeave);\n    this.elements.puzzlesContainer\n      .addEventListener('drop', this.dragDrop);\n\n    this.elements.puzzles = this.elements.puzzlesContainer\n      .querySelectorAll('.puzzles__item');\n  },\n\n  createBlockScores(gameWrapper) {\n    this.elements.scoresInfo = document.createElement('section');\n    this.elements.scoresInfo.classList.add('scores-info');\n    gameWrapper.appendChild(this.elements.scoresInfo);\n\n    const scoresWrapper = document.createElement('div');\n    scoresWrapper.classList.add('wrapper');\n    this.elements.scoresInfo.appendChild(scoresWrapper);\n\n    const scoresInfoContent = document.createElement('div');\n    scoresInfoContent.classList.add('scores-info__content');\n    scoresInfoContent.innerHTML = '<p>Best games</p>';\n    scoresWrapper.appendChild(scoresInfoContent);\n  },\n\n  createBlockMenu() {\n    this.elements.menu = document.createElement('section');\n    this.elements.menu.classList.add('menu');\n    this.elements.main.appendChild(this.elements.menu);\n\n    const menuWrapper = document.createElement('div');\n    menuWrapper.classList.add('wrapper');\n    this.elements.menu.appendChild(menuWrapper);\n\n    const navigation = document.createElement('nav');\n    navigation.classList.add('navigation');\n    menuWrapper.appendChild(navigation);\n    navigation.appendChild(this.createButtons());\n  },\n\n  createButtons() {\n    const fragment = document.createDocumentFragment();\n\n    this.menuButtons.forEach((button) => {\n      const buttonElement = document.createElement('button');\n      buttonElement.classList.add('navigation__button');\n\n      switch (button) {\n        case 'Scores':\n          buttonElement.innerText = 'Scores';\n          this.createScoresBtn(buttonElement);\n          break;\n        case 'New game':\n          buttonElement.innerText = 'New game';\n          this.createNewGameBtn(buttonElement);\n          break;\n        case 'Field type':\n          buttonElement.innerText = this.layouts.properties.visualInfo;\n          this.createLayoutBtn(buttonElement);\n          break;\n        case 'Sound':\n          buttonElement.innerHTML = createIconHtml('volume_up');\n          this.createSoundBtn(buttonElement);\n          break;\n        case 'Pause':\n          buttonElement.innerHTML = this.properties.paused\n            ? createIconHtml('play_arrow')\n            : createIconHtml('pause');\n          this.createPauseBtn(buttonElement);\n          break;\n        case 'Change Image':\n          buttonElement.innerText = 'Change image';\n          this.createChangeImageBtn(buttonElement);\n          break;\n        default:\n          throw new Error('Ошибка');\n      }\n\n      fragment.appendChild(buttonElement);\n    });\n    return fragment;\n  },\n\n  createBlockMessage() {\n    const message = document.createElement('section');\n    message.classList.add('message', 'message--active');\n    this.elements.main.appendChild(message);\n\n    const messageWrapper = document.createElement('div');\n    messageWrapper.classList.add('wrapper');\n    message.appendChild(messageWrapper);\n\n    this.elements.messageContent = document.createElement('div');\n    this.elements.messageContent.classList.add('message__content');\n    messageWrapper.appendChild(this.elements.messageContent);\n  },\n\n  createBlockSounds() {\n    this.elements.soundsContainer = document.createElement('div');\n    this.elements.soundsContainer.classList.add('sounds');\n    this.elements.soundsContainer.appendChild(this.createSounds());\n    document.body.appendChild(this.elements.soundsContainer);\n  },\n\n  loadStateFromLocalStorage() {\n    this.layouts.currentValue = Number(localStorage.getItem('layoutValue'));\n    this.generateLayoutProperties();\n    this.properties.paused = JSON.parse(localStorage.getItem('paused'));\n    this.properties.cells = JSON.parse(localStorage.getItem('cells'));\n    this.properties.empty = JSON.parse(localStorage.getItem('empty'));\n\n    const fragment = document.createDocumentFragment();\n\n    // Rebuild saved puzzle set\n    for (let i = 0; i < this.properties.cells.length; i += 1) {\n      const parentBlockWidthInPercent = 100;\n      this.properties.cellSizeInPercent = parentBlockWidthInPercent\n        / this.layouts.properties.puzzlesInRow;\n\n      const puzzleElement = document.createElement('div');\n\n      const {\n        left, top, value, image,\n      } = this.properties.cells[i];\n\n      if (value !== 0) {\n        puzzleElement.classList.add('puzzles__item', 'puzzles__item--filled');\n        puzzleElement.setAttribute('draggable', 'true');\n\n        puzzleElement.style = `\n          top: ${top * this.properties.cellSizeInPercent}%;\n          left: ${left * this.properties.cellSizeInPercent}%;\n          width: ${this.properties.cellSizeInPercent}%;\n          height: ${this.properties.cellSizeInPercent}%;`;\n\n        this.properties.cells[i].element = puzzleElement;\n\n        const img = document.createElement('img');\n        img.setAttribute('src', image);\n        img.style = 'width: 100%; height: 100%;';\n        puzzleElement.appendChild(img);\n\n        puzzleElement.addEventListener('dragstart', (e) => {\n          this.dragStart(e);\n        });\n        puzzleElement.addEventListener('dragend', (e) => {\n          this.dragEnd(e, i);\n        });\n        puzzleElement.addEventListener('click', () => {\n          this.movePuzzle(i);\n        });\n      }\n\n      fragment.appendChild(puzzleElement);\n    }\n\n    return fragment;\n  },\n\n  generateLayoutProperties() {\n    this.layouts.properties.puzzlesInRow = this.layouts.currentValue;\n    this.layouts.properties.puzzlesInColumn = this.layouts.currentValue;\n\n    const row = this.layouts.properties.puzzlesInRow;\n    const column = this.layouts.properties.puzzlesInColumn;\n\n    this.layouts.properties.puzzlesCount = row * column;\n    this.layouts.properties.visualInfo = `${row}*${column}`;\n  },\n\n  createPuzzles() {\n    if (localStorage.getItem('layoutValue') !== null) {\n      this.layouts.currentValue = Number(localStorage.getItem('layoutValue'));\n    }\n\n    this.generateLayoutProperties();\n\n    // Create new puzzle set\n    const imgNumber = Math.floor(1 + Math.random() * this.images.count);\n    const numbers = [...Array(this.layouts.properties.puzzlesCount).keys()];\n    // .sort(() => Math.random() - 0.5);\n\n    const fragment = document.createDocumentFragment();\n\n    for (let i = 0; i < this.layouts.properties.puzzlesCount; i += 1) {\n      const puzzleElement = this.createPuzzleElement(i, numbers, imgNumber);\n      fragment.appendChild(puzzleElement);\n    }\n\n    console.log(this.layouts.properties.puzzlesCount);\n    this.mixPuzzles();\n\n    return fragment;\n  },\n\n  mixPuzzles() {\n    console.log(this.layouts.properties.puzzlesCount);\n    for (let i = 0; i <= this.layouts.properties.puzzlesCount; i += 1) {\n      const emptyValue = this.properties.empty.value;\n      const rowLength = this.layouts.properties.puzzlesInRow;\n      const { puzzlesCount } = this.layouts.properties;\n\n      const vertical = 1;\n      const horisontal = 0;\n      const coordinateToBeChanged = randomInteger(0, 1) ? vertical : horisontal;\n\n      const minus = -1;\n      const plus = 1;\n      const directionOfChanging = randomInteger(0, 1) ? plus : minus;\n\n      let movedPuzzleValue;\n\n      if (coordinateToBeChanged) {\n        movedPuzzleValue = emptyValue + directionOfChanging * rowLength;\n\n        if (movedPuzzleValue < 0 || movedPuzzleValue > puzzlesCount - 1) {\n          movedPuzzleValue = emptyValue - directionOfChanging * rowLength;\n        }\n      }\n\n      if (!coordinateToBeChanged) {\n        movedPuzzleValue = emptyValue + directionOfChanging;\n\n        if (movedPuzzleValue < 0 || movedPuzzleValue > puzzlesCount - 1) {\n          movedPuzzleValue = emptyValue - directionOfChanging;\n        }\n      }\n\n      const cell = this.properties.cells.find((element) => element.value === movedPuzzleValue);\n\n      cell.element.style = `\n         top: ${this.properties.empty.top * this.properties.cellSizeInPercent}%;\n         left: ${this.properties.empty.left * this.properties.cellSizeInPercent}%;\n         width: ${this.properties.cellSizeInPercent}%;\n         height: ${this.properties.cellSizeInPercent}%;`;\n\n      const emptyLeft = this.properties.empty.left;\n      const emptyTop = this.properties.empty.top;\n      this.properties.empty.left = cell.left;\n      this.properties.empty.top = cell.top;\n      cell.left = emptyLeft;\n      cell.top = emptyTop;\n    }\n\n    this.setItemLocalStorage();\n  },\n\n  createPuzzleElement(i, numbers, imgNumber) {\n    const parentBlockWidthInPercent = 100;\n    this.properties.cellSizeInPercent = parentBlockWidthInPercent\n      / this.layouts.properties.puzzlesInRow;\n    const puzzleElement = document.createElement('div');\n\n    if (numbers[i] === 0) {\n      const value = numbers[i];\n      const left = i % this.layouts.properties.puzzlesInRow;\n      const top = (i - left) / this.layouts.properties.puzzlesInRow;\n\n      this.properties.empty = {\n        value, // 0 for empty\n        left, // Assign horizontal coordinate (i.e. position in a row -> 0, 1, 2 ... 7)\n        top, // Assign vertical coordinate (i.e. position in a column -> 0, 1, 2 ... 7)\n      };\n\n      this.properties.cells.push(this.properties.empty);\n    } else {\n      puzzleElement.classList.add('puzzles__item', 'puzzles__item--filled');\n      puzzleElement.setAttribute('draggable', 'true');\n      const value = numbers[i];\n      puzzleElement.setAttribute('id', value);\n\n      const left = i % this.layouts.properties.puzzlesInRow;\n      const top = (i - left) / this.layouts.properties.puzzlesInRow;\n\n      this\n        .createImageSet(i, this.properties.cellSizeInPercent, imgNumber, puzzleElement, value);\n\n      puzzleElement.style = `\n        top: ${top * this.properties.cellSizeInPercent}%;\n        left: ${left * this.properties.cellSizeInPercent}%;\n        width: ${this.properties.cellSizeInPercent}%;\n        height: ${this.properties.cellSizeInPercent}%;`;\n\n      this.properties.cells.push({\n        value, // From 1 to numbers.length - 1\n        left, // Assign horizontal coordinate to the puzzle\n        top, // Assign vertical coordinate to the puzzle\n        element: puzzleElement, // Assign DOM element to the puzzle\n      });\n\n      puzzleElement.addEventListener('dragstart', (e) => {\n        this.dragStart(e);\n      });\n      puzzleElement.addEventListener('dragend', (e) => {\n        this.dragEnd(e, i);\n      });\n      puzzleElement.addEventListener('click', () => {\n        this.movePuzzle(i);\n      });\n    }\n    return puzzleElement;\n  },\n\n  createImageSet(index, cellSizeInPercent, imgNumber, puzzleElement, value) {\n    const initialImageWidthPx = 900;\n    const cellSizeComparingToParent = cellSizeInPercent / 100;\n    const cellSizePx = initialImageWidthPx * cellSizeComparingToParent;\n\n    const left = value % this.layouts.properties.puzzlesInRow;\n    const top = (value - left) / this.layouts.properties.puzzlesInRow;\n    const leftPx = left * cellSizePx;\n    const topPx = top * cellSizePx;\n\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.style = `width: ${cellSizePx}px; height: ${cellSizePx}px; display: none`;\n\n    const im = new Image(cellSizePx, cellSizePx);\n    im.src = `${this.images.path}${imgNumber}.jpg`;\n\n    im.onload = () => {\n      canvas.width = im.naturalWidth;\n      canvas.height = im.naturalHeight;\n      ctx.drawImage(\n        im,\n        leftPx,\n        topPx,\n        cellSizePx,\n        cellSizePx,\n        0,\n        0,\n        100 * 9,\n        100 * 9,\n      );\n      const imageURL = canvas\n        .toDataURL('image/jpeg')\n        .replace('image/png', 'image/octet-stream');\n      const img = document.createElement('img');\n      img.setAttribute('src', imageURL);\n      img.style = 'width: 100%; height: 100%;';\n      puzzleElement.appendChild(img);\n      this.properties.cells[index].image = imageURL;\n    };\n  },\n\n  createScoresBtn(buttonElement) {\n    buttonElement.setAttribute('id', 'scores');\n    buttonElement.addEventListener('click', () => {\n      this.toggleScore();\n      this.playSound('button');\n    });\n  },\n\n  createNewGameBtn(buttonElement) {\n    buttonElement.setAttribute('id', 'new-game');\n    buttonElement.addEventListener('click', () => {\n      this.pressNewGame();\n      this.playSound('button');\n    });\n  },\n\n  createLayoutBtn(buttonElement) {\n    buttonElement.setAttribute('id', 'layout');\n    buttonElement.addEventListener('click', (e) => {\n      this.changeLayOut(e);\n      this.pressNewGame();\n      this.playSound('button');\n    });\n  },\n\n  createSoundBtn(buttonElement) {\n    buttonElement.setAttribute('id', 'sound');\n    buttonElement.addEventListener('click', (e) => {\n      this.toggleSound(e);\n      this.playSound('button');\n    });\n  },\n\n  createPauseBtn(buttonElement) {\n    buttonElement.setAttribute('id', 'pause');\n    buttonElement.addEventListener('click', (e) => {\n      this.togglePause(e);\n      this.playSound('button');\n    });\n  },\n\n  createChangeImageBtn(buttonElement) {\n    buttonElement.setAttribute('id', 'change-image');\n    buttonElement.addEventListener('click', () => {\n      this.changeImage();\n      this.pressNewGame();\n      this.playSound('button');\n    });\n  },\n\n  showTime() {\n    if (gemPuzzle.properties.isCompleted) return;\n    if (gemPuzzle.properties.paused) return;\n\n    if (localStorage.getItem('seconds') !== null) {\n      gemPuzzle.properties.seconds = Number(localStorage.getItem('seconds'));\n    }\n    if (localStorage.getItem('minutes') !== null) {\n      gemPuzzle.properties.minutes = Number(localStorage.getItem('minutes'));\n    }\n    if (localStorage.getItem('hours') !== null) {\n      gemPuzzle.properties.hours = Number(localStorage.getItem('hours'));\n    }\n\n    if (gemPuzzle.properties.seconds === 60) {\n      gemPuzzle.properties.seconds = 0;\n      gemPuzzle.properties.minutes += 1;\n    }\n    if (gemPuzzle.properties.minutes === 60) {\n      gemPuzzle.properties.minutes = 0;\n      gemPuzzle.properties.hours += 1;\n    }\n\n    const time = document.querySelector('.info-content__time');\n    const hours = addLeadZero(gemPuzzle.properties.hours);\n    const minutes = addLeadZero(gemPuzzle.properties.minutes);\n    const seconds = addLeadZero(gemPuzzle.properties.seconds);\n\n    time.innerText = `${hours}:${minutes}:${seconds}`;\n    gemPuzzle.properties.seconds += 1;\n\n    localStorage.setItem('hours', gemPuzzle.properties.hours);\n    localStorage.setItem('minutes', gemPuzzle.properties.minutes);\n    localStorage.setItem('seconds', gemPuzzle.properties.seconds);\n  },\n\n  setItemLocalStorage() {\n    localStorage.setItem('layoutValue', this.layouts.currentValue);\n    localStorage.setItem('cells', JSON.stringify(this.properties.cells));\n    localStorage.setItem('empty', JSON.stringify(this.properties.empty));\n    localStorage.setItem('soundOn', JSON.stringify(this.properties.soundOn));\n    localStorage.setItem('isCompleted', JSON.stringify(this.properties.isCompleted));\n    localStorage.setItem('paused', JSON.stringify(this.properties.paused));\n    localStorage.setItem('message', JSON.stringify(this.elements.messageContent.innerText));\n  },\n\n  showMoves() {\n    if (localStorage.getItem('moves') !== null) {\n      this.properties.moves = Number(localStorage.getItem('moves'));\n    }\n\n    this.properties.moves += 1;\n    this.elements.moves.innerText = `Moves: ${this.properties.moves}`;\n    localStorage.setItem('moves', this.properties.moves);\n  },\n\n  toggleScore() {},\n\n  pressNewGame() {\n    this.properties.isCompleted = false;\n    this.properties.paused = false;\n\n    // Clear current puzzle set\n    this.properties.cells = [];\n    this.elements.puzzlesContainer.innerHTML = '';\n    this.elements.puzzlesContainer.appendChild(this.createPuzzles());\n    document.querySelector('.message__content').innerText = ' ';\n\n    // New timer\n    this.properties.hours = 0;\n    this.properties.minutes = 0;\n    this.properties.seconds = 1;\n    document.querySelector('.info-content__time').innerHTML = '00:00:00';\n    clearInterval(this.properties.timer);\n    this.properties.timer = setInterval(this.showTime, 1000);\n\n    // New moves counter\n    this.properties.moves = 0;\n    this.elements.moves.innerText = `Moves: ${this.properties.moves}`;\n\n    this.clearLocalStorage();\n  },\n\n  clearLocalStorage() {\n    // Only soundOn remains in local storage\n    localStorage.removeItem('moves');\n    localStorage.removeItem('hours');\n    localStorage.removeItem('minutes');\n    localStorage.removeItem('seconds');\n    localStorage.removeItem('layoutValue');\n    localStorage.removeItem('cells');\n    localStorage.removeItem('empty');\n    localStorage.removeItem('isCompleted');\n    localStorage.removeItem('paused');\n    localStorage.removeItem('message');\n  },\n\n  changeLayOut(e) {\n    this.properties.isCompleted = false;\n    document.querySelector('.message__content').innerText = ' ';\n\n    // Change the button\n    if (this.layouts.currentValue === this.layouts.maxValue) {\n      this.layouts.currentValue = this.layouts.minValue;\n    } else {\n      this.layouts.currentValue += 1;\n    }\n\n    this.generateLayoutProperties();\n    this.setItemLocalStorage();\n    e.target.innerText = this.layouts.properties.visualInfo;\n\n    // Change the layout\n    this.elements.puzzlesContainer.innerHTML = '';\n    this.elements.puzzlesContainer.appendChild(this.createPuzzles());\n  },\n\n  changeImage() {\n    this.properties.isCompleted = false;\n    document.querySelector('.message__content').innerText = ' ';\n  },\n\n  toggleSound(e) {\n    this.properties.soundOn = !this.properties.soundOn;\n\n    if (this.properties.soundOn === true) {\n      e.currentTarget.innerHTML = createIconHtml('volume_up');\n    } else {\n      e.currentTarget.innerHTML = createIconHtml('volume_off');\n    }\n  },\n\n  playSound(input) {\n    if (this.properties.soundOn === false) return;\n\n    let soundSelected;\n\n    if (input === 'puzzle') {\n      soundSelected = document.querySelector('.sound-0');\n    } else { // input === 'button'\n      soundSelected = document.querySelector('.sound-1');\n    }\n\n    soundSelected.currentTime = 0;\n    soundSelected.play();\n  },\n\n  togglePause(e) {\n    this.properties.paused = !this.properties.paused;\n\n    if (this.properties.paused) {\n      e.currentTarget.innerHTML = createIconHtml('play_arrow');\n    } else {\n      e.currentTarget.innerHTML = createIconHtml('pause');\n    }\n  },\n\n  showCongrats() {\n    const message = document.querySelector('.message__content');\n    const time = document.querySelector('.info-content__time').innerHTML;\n    const { moves } = gemPuzzle.properties;\n    message.innerText = `Congratulations! You solved the puzzle in ${time} and ${moves} moves`;\n  },\n\n  dragStart(e) {\n    setTimeout(() => {\n      e.target.classList.add('puzzles__item--hide');\n    }, 0);\n  },\n\n  movePuzzle(index) {\n    const cell = this.properties.cells[index];\n\n    // Check whether the puzzle clicked (dragged) is near the empty puzzle\n    const leftDiff = Math.abs(this.properties.empty.left - cell.left);\n    const topDiff = Math.abs(this.properties.empty.top - cell.top);\n\n    if (leftDiff + topDiff > 1) return; // If puzzle is't near the empty one -> do nothing\n    if (gemPuzzle.properties.isCompleted) return; // If the game is completed -> do nothing\n    if (this.properties.paused) return;\n\n    cell.element.style = `\n      top: ${this.properties.empty.top * this.properties.cellSizeInPercent}%;\n      left: ${this.properties.empty.left * this.properties.cellSizeInPercent}%;\n      width: ${this.properties.cellSizeInPercent}%;\n      height: ${this.properties.cellSizeInPercent}%;`;\n\n    const emptyLeft = this.properties.empty.left;\n    const emptyTop = this.properties.empty.top;\n    this.properties.empty.left = cell.left;\n    this.properties.empty.top = cell.top;\n    cell.left = emptyLeft;\n    cell.top = emptyTop;\n\n    this.showMoves();\n    this.playSound('puzzle');\n\n    const isFinished = this.properties.cells\n      .every((currentCell) => currentCell.value\n        === currentCell.top\n        * this.layouts.properties.puzzlesInRow\n        + currentCell.left);\n\n    if (isFinished) {\n      gemPuzzle.properties.isCompleted = true;\n      setTimeout(this.showCongrats, 600);\n    }\n\n    this.setItemLocalStorage();\n  },\n\n  dragEnd(e, index) {\n    e.target.classList.remove('puzzles__item--hide');\n    this.movePuzzle(index);\n  },\n\n  dragOver(e) {\n    e.preventDefault();\n  },\n\n  dragEnter(e) {\n    e.preventDefault();\n    this.classList.add('puzzles--hovered');\n  },\n\n  dragLeave() {\n    this.classList.remove('puzzles--hovered');\n  },\n\n  dragDrop() {\n    this.classList.remove('puzzles--hovered');\n  },\n\n  createSounds() {\n    const fragment = document.createDocumentFragment();\n\n    for (let i = 0; i < this.sounds.length; i += 1) {\n      const sound = document.createElement('audio');\n      sound.classList.add(`sound-${i}`);\n      sound.setAttribute('src', `src/sounds/${this.sounds[i]}`);\n      fragment.appendChild(sound);\n    }\n\n    return fragment;\n  },\n};\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  gemPuzzle.init();\n});\n\n\n//# sourceURL=webpack://gem-puzzle/./src/js/index.js?");
/******/ })()
;